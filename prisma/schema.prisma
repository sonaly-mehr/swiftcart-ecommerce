generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  cart          Json      @default("{}")
  resetToken    String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")

// Membership fields
  isPlusMember  Boolean   @default(false)
  stripeCustomerId String? @map("stripe_customer_id")
  subscriptionId String? @map("subscription_id")
  

  // Relations
  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  Address       Address[]
  store         Store?
  buyerOrders   Order[]   @relation("BuyerRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Required for creating a Product: name, description, mrp, price, images, category, storeId
model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    mrp         Float
    price       Float
    images      String[]
    category    String
    inStock     Boolean  @default(true)
    storeId     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
    orderItems OrderItem[]
    rating     Rating[]
}

enum OrderStatus {
    ORDER_PLACED
    PROCESSING
    SHIPPED
    DELIVERED
}

enum PaymentMethod {
    COD
    STRIPE
}

// Required for creating an Order: total, userId, storeId, addressId, isPaid, paymentMethod, isCouponUsed, coupon (JSON), orderItems (nested)
model Order {
    id            String        @id @default(cuid())
    total         Float
    status        OrderStatus   @default(ORDER_PLACED)
    userId        String
    storeId       String
    addressId     String
    isPaid        Boolean       @default(false)
    paymentMethod PaymentMethod
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    isCouponUsed  Boolean       @default(false)
    coupon        Json          @default("{}")
    orderItems    OrderItem[]

    // Relations
    user    User    @relation("BuyerRelation", fields: [userId], references: [id])
    store   Store   @relation(fields: [storeId], references: [id])
    address Address @relation(fields: [addressId], references: [id])
}

// Required for creating an OrderItem: orderId, productId, quantity, price
model OrderItem {
    orderId   String
    productId String
    quantity  Int
    price     Float

    // Relations
    order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id])

    @@id([orderId, productId])
}

// Required for creating a Rating: rating, review, userId, productId
model Rating {
    id        String   @id @default(cuid())
    rating    Int
    review    String
    userId    String
    productId String
    orderId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId, orderId])
}

// Required for creating an Address: userId, name, email, street, city, state, zip, country, phone
model Address {
    id        String   @id @default(cuid())
    userId    String
    name      String
    email     String
    street    String
    city      String
    state     String
    zip       String
    country   String
    phone     String
    createdAt DateTime @default(now())

    // Relations
    Order Order[]
    user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Required for creating a Coupon: code, description, discount, forNewUser, isPublic, expiresAt
model Coupon {
    code        String   @id
    description String
    discount    Float
    forNewUser  Boolean
    forMember   Boolean  @default(false)
    isPublic    Boolean
    expiresAt   DateTime
    createdAt   DateTime @default(now())
}

// Required for creating a Store: userId, name, username, email, contact, logo, description, address (optional: , status, isActive)
model Store {
    id          String   @id @default(cuid())
    userId      String   @unique
    name        String
    description String
    username    String   @unique
    address     String
    status      String   @default("pending")
    isActive    Boolean  @default(false)
    logo        String
    email       String
    contact     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Product Product[]
    Order   Order[]
    user    User      @relation(fields: [userId], references: [id])
}
